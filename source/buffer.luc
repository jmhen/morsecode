module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,       // AVR RX buffer full

    /* SELF-MADE IO COMPONENTS*/
    output seven_seg[7],    // individual segments in each seven_seg
    output seg_sel[6],      // to select between different seven_seg

    input button[5],        // button for level control and to start the game

    output red_led,         // to display morse code
    output enter_led[2],    // to indicate which player to enter
    output guess_led[2],     // to indicate which player to guess

    output button_col[6],   // coloums in keypad
    input button_row[5],     // rows in keypad

    output gnd,
    output pwr

  ) {

  sig rst;                  // reset signal

  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;

    // RAMs
    simple_ram question (#SIZE(5), #DEPTH(80); //dealing with 80 characters 5 bits wide; //ram of 80 by 5
    simple_ram answer (#SIZE(5), #DEPTH(80); //dealing with 80 characters 5 bits wide

    dff entry_count[$clog2(32)]; //dealing with 80 characters per input string
    dff occupied [1]; //check if current ram address has data

    .rst(rst){
          
      displaymorse dm;

      multiseg multiseg; // controls the data for multi-segment displays
      settings settings; // controls the speed and length (for game.IDLE)

      fsm game = {IDLE, INPUT1, DISPLAY, INPUT2, CHECK, SCORE};
      input_capture detect; //capture button input (for INPUT1, INPUT2)
      check check;

    }




  }

  always {

    ////////////////////
    // INITIALIZATIONS//
    ////////////////////

    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset

    ////////////// turn LEDs off
    led = 8h00;
    red_led = 0;
    enter_led = 2b11;      //RGB led off is 1
    guess_led = 2b11;      //RGB led off is 1

    ////////////// Unused
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port

    ////////////// Others
    gnd = 0;
    pwr = 1;


    ////////////// Connections of COMPONENTS
    settings.button = button;

    
    multiseg.speed_disp = settings.speed_disp;
    multiseg.length_disp = settings.length_disp;

    multiseg.gscore = 0;
    multiseg.bscore = 0;
    
    //input_cature 
    button_col = detect.button_col;
    detect.button_row = button_row;

      
    dm.data = 5bxxxxx;
    dm.incr = settings.increment;
      
    //rams
    question.address = entry_count.q; // use entry_count as the RAM entry address
    question.write_data = 8hxx;      // don't care
    question.write_en = 0;

    answer.address = entry_count.q; // use entry_count as the RAM entry address
    answer.write_data = 8hxx;      // don't care
    answer.write_en = 0;

    seven_seg = multiseg.sel; //turn 7-seg off
    seg_sel = multiseg.sel; // link seg_choice control to seg_sel

    check.adata = 0;
    check.bdata = 0;




    case (game.q){
      game.IDLE:

        if (settings.start != 0){
          game.d = game.INPUT1;
        }


      game.INPUT1:

        question.write_data = bm.somechar;   // AINUL
        question.write_en = 1;             // signal we want to write
        entry_count.d = entry_count.q + 1; // increment the address

        // if we run out of space or they pressed enter
        if (&entry_count.q || /*character*/ == 5b11101) { //AINUL: END CHARACTER
          entry_count.d = 0; // reset entry_count
          game.d = game.DISPLAY;
        }
      }

      game.DISPLAY:

        if (/*condition*/){
          dm.data = question.read_data;
          dm.incr = settings.increment;
          red_led = dm.red_led;
        }

        if (/*condition*/){

          game.d = game.INPUT2;

        }




      game.INPUT2:

        answer.write_data = bm.somechar;   // AINUL
        answer.write_en = 1;             // signal we want to write
        entry_count.d = entry_count.q + 1; // increment the address

        // if we run out of space or they pressed enter
        if (&entry_count.q || /*character*/ == 5b11101) { //AINUL: END CHARACTER
          entry_count.d = 0; // reset entry_count
          game.d = game.CHECK;
        }
      }

      game.CHECK:
        question.write_en = 0;
        answer.write_en = 0;

        question.address=check.address;
        answer.address=check.address;

        check.adata = question.read_data;
        check.bdata = answer.read_data;

        //check.out gives the score

        /*GRAND Ver*/








      }














  }
}
